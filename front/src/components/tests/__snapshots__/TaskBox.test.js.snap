// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TaskBox Rendering renders without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskBox
    todos={
        Object {
            "tasks": Array [
              Object {
                "added": "2018-07-14",
                "completed": false,
                "id": 1,
                "task": "test",
              },
              Object {
                "added": "2018-07-14",
                "completed": false,
                "id": 2,
                "task": "test 2",
              },
            ],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TaskForm
          handleClose={[Function]}
          onChange={[Function]}
          onSubmit={[Function]}
          type={null}
          value=""
          visible={false}
/>,
        <DeleteDialog
          confirmDelete={[Function]}
          handleClose={[Function]}
          visible={false}
/>,
        Array [
          <WithStyles(Paper)
            className="todo-paper"
>
            <Connect(Todo)
                        className="task"
                        completed={false}
                        id={1}
                        openDeleteDialog={[Function]}
                        openEditForm={[Function]}
                        task="test"
            />
</WithStyles(Paper)>,
          <WithStyles(Paper)
            className="todo-paper"
>
            <Connect(Todo)
                        className="task"
                        completed={false}
                        id={2}
                        openDeleteDialog={[Function]}
                        openEditForm={[Function]}
                        task="test 2"
            />
</WithStyles(Paper)>,
        ],
        <div
          className="add-button"
>
          <WithStyles(Button)
                    aria-label="Add"
                    color="primary"
                    onClick={[Function]}
                    variant="fab"
          >
                    <pure(Add) />
          </WithStyles(Button)>
</div>,
      ],
      "className": "task-box",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "handleClose": [Function],
          "onChange": [Function],
          "onSubmit": [Function],
          "type": null,
          "value": "",
          "visible": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "confirmDelete": [Function],
          "handleClose": [Function],
          "visible": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "children": <Connect(Todo)
            className="task"
            completed={false}
            id={1}
            openDeleteDialog={[Function]}
            openEditForm={[Function]}
            task="test"
/>,
          "className": "todo-paper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "task",
            "completed": false,
            "id": 1,
            "openDeleteDialog": [Function],
            "openEditForm": [Function],
            "task": "test",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "class",
        "props": Object {
          "children": <Connect(Todo)
            className="task"
            completed={false}
            id={2}
            openDeleteDialog={[Function]}
            openEditForm={[Function]}
            task="test 2"
/>,
          "className": "todo-paper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "task",
            "completed": false,
            "id": 2,
            "openDeleteDialog": [Function],
            "openEditForm": [Function],
            "task": "test 2",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Button)
            aria-label="Add"
            color="primary"
            onClick={[Function]}
            variant="fab"
>
            <pure(Add) />
</WithStyles(Button)>,
          "className": "add-button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "Add",
            "children": <pure(Add) />,
            "color": "primary",
            "onClick": [Function],
            "variant": "fab",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TaskForm
            handleClose={[Function]}
            onChange={[Function]}
            onSubmit={[Function]}
            type={null}
            value=""
            visible={false}
/>,
          <DeleteDialog
            confirmDelete={[Function]}
            handleClose={[Function]}
            visible={false}
/>,
          Array [
            <WithStyles(Paper)
              className="todo-paper"
>
              <Connect(Todo)
                            className="task"
                            completed={false}
                            id={1}
                            openDeleteDialog={[Function]}
                            openEditForm={[Function]}
                            task="test"
              />
</WithStyles(Paper)>,
            <WithStyles(Paper)
              className="todo-paper"
>
              <Connect(Todo)
                            className="task"
                            completed={false}
                            id={2}
                            openDeleteDialog={[Function]}
                            openEditForm={[Function]}
                            task="test 2"
              />
</WithStyles(Paper)>,
          ],
          <div
            className="add-button"
>
            <WithStyles(Button)
                        aria-label="Add"
                        color="primary"
                        onClick={[Function]}
                        variant="fab"
            >
                        <pure(Add) />
            </WithStyles(Button)>
</div>,
        ],
        "className": "task-box",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "handleClose": [Function],
            "onChange": [Function],
            "onSubmit": [Function],
            "type": null,
            "value": "",
            "visible": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "confirmDelete": [Function],
            "handleClose": [Function],
            "visible": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "children": <Connect(Todo)
              className="task"
              completed={false}
              id={1}
              openDeleteDialog={[Function]}
              openEditForm={[Function]}
              task="test"
/>,
            "className": "todo-paper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "task",
              "completed": false,
              "id": 1,
              "openDeleteDialog": [Function],
              "openEditForm": [Function],
              "task": "test",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "children": <Connect(Todo)
              className="task"
              completed={false}
              id={2}
              openDeleteDialog={[Function]}
              openEditForm={[Function]}
              task="test 2"
/>,
            "className": "todo-paper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "task",
              "completed": false,
              "id": 2,
              "openDeleteDialog": [Function],
              "openEditForm": [Function],
              "task": "test 2",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Button)
              aria-label="Add"
              color="primary"
              onClick={[Function]}
              variant="fab"
>
              <pure(Add) />
</WithStyles(Button)>,
            "className": "add-button",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "aria-label": "Add",
              "children": <pure(Add) />,
              "color": "primary",
              "onClick": [Function],
              "variant": "fab",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
